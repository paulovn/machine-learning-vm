# -*- mode: ruby;  ruby-indent-tabs-mode: t -*-
# vi: set ft=ruby :
# **************************************************************************
# Take the base box and remove Spark & associated stuff to creater a leaner base
# **************************************************************************

# --------------------------------------------------------------------------
# Variables defining the configuration of Spark & notebook 
# Modify as needed

# RAM memory used for the VM, in MB
vm_memory = '1024'
# Number of CPU cores assigned to the VM
vm_cpus = '1'


# --------------------------------------------------------------------------
# Some variables that affect Vagrant execution

# Check the command requested -- if ssh we'll change the login user
vagrant_command = ARGV[0]

# Virtualenv directory
venv_basedir = '/opt/ipnb'

# --------------------------------------------------------------------------
# Vagrant configuration

# The "2" in Vagrant.configure sets the configuration version
Vagrant.configure(2) do |config|

  # This is to avoid Vagrant inserting a new SSH key, instead of the
  # default one (perhaps because the box will be later packaged)
  config.ssh.insert_key = false

  config.vm.define "vm-ml-base64" do |vgrsimple|

    # The base box we are using. As fetched from ATLAS
    vgrsimple.vm.box_version = "= 3.4.0"
    vgrsimple.vm.box = "paulovn/spark-base64"

    # Alternative place: local box
    vgrsimple.vm.box_url = "file:///almacen/VM/Export/VagrantBox/spark-base64-LOCAL.json"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # vgrsimple.vm.box_check_update = false

    # Customize the virtual machine: set hostname & allocated RAM
    vgrsimple.vm.hostname = "vgr-ml-base64"
    vgrsimple.vm.provider :virtualbox do |vb|
      # Set the hostname in VirtualBox
      vb.name = vgrsimple.vm.hostname.to_s
      # Customize the amount of memory on the VM
      vb.memory = vm_memory
      # Set the number of CPUs
      vb.cpus = vm_cpus
      # Display the VirtualBox GUI when booting the machine
      #vb.gui = true
    end

    # vagrant-vbguest plugin: set auto_update to false, if you do NOT want to
    # check the correct additions version when booting this machine
    vgrsimple.vbguest.auto_update = false

    # **********************************************************************
    # Networking

    # ---- NAT interface ----
    # NAT port forwarding
    vgrsimple.vm.network :forwarded_port,
     auto_correct: true,
     guest: 8888,
     host: 8008

    # ---- bridged interface ----
    # Declare a public network
    # This enables the machine to be connected from outside, which is a
    # must for a Spark driver [it needs SPARK_LOCAL_IP to be set to 
    # the outside-visible interface].
    # =====> Uncomment the following two lines to enable bridge mode:
    #vgrsimple.vm.network "public_network",
    #type: "dhcp"

    # ===> if the host has more than one interface, we can set which one to use
    #bridge: "wlan0"
    # ===> we can also set the MAC address we will send to the DHCP server
    #:mac => "08002710A7ED"


    # ---- private interface ----
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    #vgrsimple.vm.network "private_network", ip: "192.72.33.10"



    # **********************************************************************
    # Provisioning: install Spark configuration files and startup scripts

    # .........................................
    # Update packages
    vgrsimple.vm.provision "01.base",
    type: "shell",
    privileged: true,
    inline: <<-SHELL
      echo "Updating packages ..."
      apt-get update -y
      DEBIAN_FRONTEND=noninteractive apt-get --yes --option Dpkg::Options::="--force-confdef" upgrade
    SHELL

    vgrsimple.vm.provision "02.remove-spark",
    type: "shell", 
    privileged: true,
    inline: <<-SHELL
      rm -rf /opt/spark
      rm -f /usr/local/lib/R/library/SparkR
    SHELL

    vgrsimple.vm.provision "03.remove-jdk",
    type: "shell", 
    privileged: true,
    inline: <<-SHELL
      apt-get remove -y openjdk-11-jdk-headless
    SHELL
    
    vgrsimple.vm.provision "04.clean-virtualenv",
    type: "shell", 
    privileged: false,
    inline: <<-SHELL
      pip install future
      rm -f /opt/ipnb/bin/pyspark-ipnb
    SHELL

    vgrsimple.vm.provision "05.update-packages",
    type: "shell",
    privileged: false,
    inline: <<-SHELL
      pip install --upgrade pip
      pip uninstall -y xgboost

      pip install --upgrade Cython

      # already valid in base 3.4.0
      #pip install --upgrade jupyter-client==7.4.4 tornado==6.2
      #pip install --upgrade ipython jupyter-console nbconvert notebook nbclassic
      #(cd /opt/ipnb/lib/python3.*/site-packages/nbclassic/static/components/marked/lib; ln -s marked.umd.js marked.js)
      #pip install --upgrade widgetsnbextension ipywidgets ipympl

      pip install --upgrade numpy scipy pandas matplotlib pyarrow
      pip install --upgrade openpyxl xlrd
      pip install --upgrade seaborn scikit-learn statsmodels
      pip install --upgrade pystan prophet pytz
      pip install --upgrade pydot graphviz
      pip install --upgrade notebook

      #pip install --upgrade causalimpact
    SHELL

    # .........................................
    # Patched causal impact 0.2.6
    # See https://github.com/jamalsenouci/causalimpact/pull/50
    vgrsimple.vm.provision "06.causalimpact.patch",
    type: "shell",
    privileged: false,
    inline: <<-SHELL
      BR=fix-pd-datetime-check
      V=0.2.6+p1
      mkdir soft
      cd soft
      wget https://github.com/causalkayak/causalimpact/archive/refs/heads/$BR.zip
      unzip $BR.zip
      cd causalimpact-$BR
      sed "s/name = causalimpact/name = causalimpact\\nversion = $V/" -i setup.cfg
      python setup.py sdist
      pip install dist/causalimpact-$V.tar.gz
    SHELL

    # .........................................
    # Patched manager script
    vgrsimple.vm.provision "07.notebook.script",
    type: "file",
    source: "buildfiles/jupyter-notebook-mgr",
    destination: venv_basedir + "/bin/jupyter-notebook-mgr"

    # .........................................
    # Clean
    vgrsimple.vm.provision "80.clean",
      type: "shell",
      run: "never",
      privileged: true,
      inline: <<-SHELL
        echo "*** Removing snaps"
        for s in lxd core20 snapd
        do
            snap remove $s
        done

        echo "*** Cleaning temporal & installation files"
        apt-get autoclean -y
        apt-get clean -y
        apt-get remove -y libx11-dev ibgdk-pixbuf2.0-dev libice-dev libxpm-dev \
                          libpixman-1-dev libpthread-stubs0-dev libxt-dev \
                          libxcb-shm0-dev libxcb1-dev libxdmcp-dev libxext-dev \
                          x11proto-core-dev x11proto-input-dev x11proto-kb-dev \
                          x11proto-render-dev x11proto-xext-dev xtrans-dev \
                          krb5-multidev libaec-dev libjbig-dev libtiff5-dev \
                          libvpx-dev libx11-doc libxau-dev swig3.0 x11proto-dev

        # Remove bash history for root
        unset HISTFILE
        rm -f /root/.bash_history

        # Cleanup log files
        echo "** Removing logfiles"
        find /var/log -type f | while read f; do echo -ne '' > $f; done;
        journalctl --rotate --vacuum-size=10K

        # Remove leftovers for vagrant user
        HH=/home/vagrant
        rm -rf $HH/.cache/pip $HH/.gradle $HH/.bash_history $HH/*.log
        rm -rf $HH/.m2 $HH/.ivy2 $HH/.ant $HH/.sbt
        rm -rf $HH/install/* $HH/Soft $HH/tmp/*
        rm -rf /opt/ipnb/share/jupyter/nbextensions/.git*

        # Remove all temporal files
        echo "*** Cleaning temporal files"
        rm -rf /tmp/* /var/tmp/*

        # Zero the swap space
        swappart=$(cat /proc/swaps | tail -n +2 | awk -F ' ' '{print $1}')
        if [ "$swappart" != "" ]; then
          echo "*** Whiteout swap space: $swappart"
          swapoff $swappart;
          dd if=/dev/zero of=$swappart;
          mkswap $swappart;
          swapon $swappart;
        fi

        # Zero disk free space
        echo "*** Whiteout root & boot partitions"
        for fs in / /boot/
        do
           count=$(df --sync -kP $fs | tail -n1 | awk -F ' ' '{print $4}')
           let count--
           dd if=/dev/zero of=${fs}whitespace bs=1024 count=$count
           rm -f ${fs}whitespace;
        done
        sync

      SHELL

  end # config.vm.define

end
